# 👥 Gerenciador de Usuários - Node.js

Este é um projeto simples em Node.js para gerenciar uma lista de usuários em memória. Ideal para testes, aprendizado ou como base para APIs REST simples.

## 📦 Funcionalidades

- 📋 Listar todos os usuários (`getUsuarios`)
- 🔍 Buscar usuário por ID (`getUsuarioById`)
- ➕ Adicionar novo usuário (`addUsuario`)
- ✏️ Atualizar usuário existente (`updateUsuario`)
- ❌ Deletar usuário (`deleteUsuario`)

## 🧠 Como funciona?

Os usuários são armazenados em um array em memória, com um ID gerado automaticamente a cada inserção.

### 🧱 Estrutura de um usuário:

```js
{
  id: 1,
  nome: "Nome do Usuário",
  email: "email@exemplo.com"
}
🚀 Exemplo de uso
js
Copiar
Editar
const {
  getUsuarios,
  getUsuarioById,
  addUsuario,
  updateUsuario,
  deleteUsuario
} = require('./usuarios');

// Adicionando usuário
const novo = addUsuario({ nome: 'João', email: 'joao@email.com' });

// Buscando por ID
const encontrado = getUsuarioById(novo.id);

// Atualizando usuário
const atualizado = updateUsuario(novo.id, { nome: 'João Silva', email: 'joao.silva@email.com' });

// Deletando usuário
const sucesso = deleteUsuario(novo.id);
🔧 Requisitos
Node.js instalado

📁 Como executar
bash
Copiar
Editar
git clone https://github.com/seu-usuario/nome-do-repo.git
cd nome-do-repo
npm install
Depois, você pode importar os métodos e usá-los como mostrado no exemplo.

📝 Licença
Este projeto está sob a licença MIT. 🤝





🧪 Testando no Postman (Passo a Passo)
💡 Certifique-se de que você criou uma API HTTP (ex: usando Express) para expor esses métodos. Se quiser, posso te ajudar com isso também.

📍 Supondo que sua API esteja rodando em: http://localhost:3000/usuarios
✅ 1. Listar todos os usuários
Método: GET

URL: http://localhost:3000/usuarios

📥 Retorno esperado:
json
Copiar
Editar
[
  {
    "id": 1,
    "nome": "João",
    "email": "joao@email.com"
  }
]
➕ 2. Adicionar novo usuário
Método: POST

URL: http://localhost:3000/usuarios

Body (raw / JSON):

json
Copiar
Editar
{
  "nome": "Maria",
  "email": "maria@email.com"
}
📥 Retorno esperado:
json
Copiar
Editar
{
  "id": 2,
  "nome": "Maria",
  "email": "maria@email.com"
}
🔍 3. Buscar usuário por ID
Método: GET

URL: http://localhost:3000/usuarios/2

✏️ 4. Atualizar um usuário
Método: PUT

URL: http://localhost:3000/usuarios/2

Body (raw / JSON):

json
Copiar
Editar
{
  "nome": "Maria Silva",
  "email": "maria.silva@email.com"
}
📥 Retorno esperado:
json
Copiar
Editar
{
  "id": 2,
  "nome": "Maria Silva",
  "email": "maria.silva@email.com"
}
❌ 5. Deletar um usuário
Método: DELETE

URL: http://localhost:3000/usuarios/2

📥 Retorno esperado:
json
Copiar
Editar
{
  "mensagem": "Usuário removido com sucesso"
}
